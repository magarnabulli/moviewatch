@inject IAdminService AdminService

<div class="d-xl justify-content-center">
	<div class="mb-3">
		@if (Page.Equals(PageType.Delete))
		{
			<EditForm Model="@Model" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<InputText id="name" class="form-control me-2" @bind-Value="Model.Name" disabled placeholder="Name"></InputText>
				<ValidationMessage For="@(()=> Model.Name)" />
				<button type="submit" class="btn btn">Delete</button>
			</EditForm>
		}
		@if (Page.Equals(PageType.Create))
		{
			<EditForm Model="@CreateModel" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<div class="mb-3">
					<InputText id="name" class="form-control me-2" @bind-Value="CreateModel.Name" placeholder="Name.."></InputText>
					<ValidationMessage For="@(()=> CreateModel.Name)" />
				</div>
				<button type="submit" class="btn btn">Create</button>
			</EditForm>
		}
		@if (Page.Equals(PageType.Update))
		{
			<EditForm Model="@UpdateModel" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<div class="mb-3">
					<div class="mb-3">
						<InputText id="name" class="form-control me-2" @bind-Value="UpdateModel.Name" disabled placeholder="@Model.Name"></InputText>
					</div>
					<ValidationMessage For="@(()=> UpdateModel.Id)" />
				</div>
				<div class="mb-3">
					<InputText id="name" class="form-control me-2" @bind-Value="UpdateModel.Name" placeholder="Change Name.."></InputText>
					<ValidationMessage For="@(()=> UpdateModel.Name)" />
				</div>
				<button type="submit" class="btn btn">Update</button>
			</EditForm>
		}
	</div>
</div>

@code {
	[Parameter] public EventCallback<string> OnChange{ get; set; }
	[Parameter] public string Page { get; set; } = string.Empty;
	[Parameter] public DirectorDto Model { get; set; } = new();
	public CreateDirectorDto CreateModel { get; set; } = new();
	public UpdateDirectorDto UpdateModel { get; set; } = new();
	private async Task SubmitChanges()
	{
		try
		{
			switch (Page)
			{
				case "Create":
					try
					{
						await AdminService.CreateAsync<CreateDirectorDto>("directors", CreateModel);
						await OnChange.InvokeAsync($"Film '{CreateModel.Name}'has been added");
					}
					catch
					{
						await OnChange.InvokeAsync("Director has not been added.");
					}
					break;
				case "Update":
					try
					{
						await AdminService.UpdateAsync<UpdateDirectorDto>($"directors/{UpdateModel.Id}", UpdateModel);
						await OnChange.InvokeAsync($"Film '{UpdateModel.Name}' has been updated.");
					}
					catch (Exception)
					{
						await OnChange.InvokeAsync($"Director '{Model.Name}' has not been updated, .");
					}
					break;
				case "Delete":
					try
					{
						await AdminService.DeleteAsync<DirectorDto>($"directors/{Model.Id}");
						await OnChange.InvokeAsync($"Director: '{Model.Name}' has been deleted.");
					}
					catch (Exception)
					{
						await OnChange.InvokeAsync($"Could not delete director: '{Model.Name}'.");
					}
					break;
			}
		}
		catch
		{
			await OnChange.InvokeAsync($"Could not submit the changes to the Director.");
		}
	}
}