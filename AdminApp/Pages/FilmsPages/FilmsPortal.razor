@inject IAdminService AdminService

<div class="d-flex me-1">
	<a href="/" class="btn btn-outline-secondary rounded-0 me-1">Back to homepage</a>
	<button type="button" class="btn btn-outline-primary rounded-0" @onclick="()=>ChangePageType(PageType.Index)">View films</button>
	<button type="button" class="btn btn-outline-primary rounded-0" @onclick="()=>ChangePageType(PageType.Create)">Add new film</button>
</div>
@if (!string.IsNullOrEmpty(Alert))
{
	<div class="d-flex">
		<div class="alert alert-dismissible fade show" role="alert">
			<strong>@Alert</strong>
			<button type="button" @onclick="CloseAlert" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
		</div>
	</div>
}
@if (Navigation == PageType.Index)
{
	<FilmsIndex OnClick="OnClick" Model="Model"></FilmsIndex>
}
@if (Navigation == PageType.Create)
{
	<ChangeFilm Page="@Navigation" OnChangeAlert="OnChangeAlert"></ChangeFilm>
}
@if (Navigation == PageType.Delete || Navigation == PageType.Update)
{
	<ChangeFilm Page="@Navigation" OnChangeAlert="OnChangeAlert" Model="Film"></ChangeFilm>
}


@code {
	public List<FilmInfoDto> Model { get; set; } = new();
	public string Alert { get; set; } = string.Empty;
	public string Navigation { get; set; } = string.Empty;
	public FilmInfoDto Film { get; set; } = new();


	void ChangePageType(string pageType) => Navigation = pageType;
	void CloseAlert() => Alert = string.Empty;

	protected override async Task OnInitializedAsync()
	{
		Alert = string.Empty;
		Model = await AdminService.ReadAsync<FilmInfoDto>("films");
	}
	async Task OnClick(ClickModel model)
	{
		if (model.PageType.Equals(PageType.Update) || model.PageType.Equals(PageType.Delete))
		{
			Film = await AdminService.ReadOneAsync<FilmInfoDto>($"films/{model.Id}") ?? new();
			ChangePageType(model.PageType);
		}
	}
	async Task OnChangeAlert(string alert)
	{
			Alert = alert;
			Model = await AdminService.ReadAsync<FilmInfoDto>("films");
			ChangePageType(PageType.Index);
	}
}

