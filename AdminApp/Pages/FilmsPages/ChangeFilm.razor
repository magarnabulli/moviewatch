@inject IAdminService AdminService
@inject IWebHostEnvironment environment
<div class="d-xl justify-content-center">
	<div class="mb-3">
		@if (Page.Equals(PageType.Delete))
		{
			<EditForm Model="@Model" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<InputText id="title" class="form-control me-2" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
				<ValidationMessage For="@(()=> Model.Title)" />
				<button type="submit" class="btn btn">Delete</button>
			</EditForm>
		}
		@if (Page.Equals(PageType.Create))
		{
			<EditForm Model="@CreateModel" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<div class="mb-3">
					<InputText id="title" class="form-control me-2" @bind-Value="CreateModel.Title" placeholder="Title"></InputText>
					<ValidationMessage For="@(()=> CreateModel.Title)" />
				</div>
				<div class="mb-3">
					@*title*@
					<InputFile OnChange="@FileInput"></InputFile>
				</div>
				<div class="mb-3">
					@*description*@
					<InputText id="description" class="form-control me-2" @bind-Value="CreateModel.Description" placeholder="Description"></InputText>
					<ValidationMessage For="@(()=> CreateModel.Description)" />
				</div>
				<div class="mb-3">
					@*released*@
					<InputDate id="released" class="form-control me-2" @bind-Value="CreateModel.Released" placeholder="Released"></InputDate>
					<ValidationMessage For="@(()=> CreateModel.Released)" />
				</div>
				<div>
					@*directorID*@
					<InputSelect @bind-Value="CreateModel.DirectorId" class="form-control mb-3">
						<option value=0>Director ...</option>
						@foreach (var director in Directors)
						{
							<option value="@director.Id">
								@director.Name
							</option>
						}
					</InputSelect>
					<ValidationMessage For="@(()=> CreateModel.DirectorId)" />
				</div>
				<div>
					@*similar*@
					<DataAnnotationsValidator />
					<ValidationSummary />
					<div class="form-check form-switch">
						@foreach (var item in Films)
						{
							<div>
								<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" value="@item.Id" @onclick="()=>SelectedValuesSimilar.Add(item.Id)" />
								<label class="form-check-label" for="flexSwitchCheckDefault">@item.Title</label>
							</div>
						}
					</div>
				</div>
				<div>
					@*genres*@
					<DataAnnotationsValidator />
					<ValidationSummary />
					<div class="form-check form-switch">
						@foreach (var item in Genres)
						{
							<div>
								<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" value="@item.Id" @onclick="()=>SelectedValuesGenre.Add(item.Id)" />
								<label class="form-check-label" for="flexSwitchCheckDefault">@item.Name</label>
							</div>
						}
					</div>
				</div>
				<div class="m-3">
					@*free*@
					<label>
						<InputCheckbox @bind-Value="CreateModel.Free"></InputCheckbox>
						Free Film
						<ValidationMessage For="@(()=> CreateModel.Free)" />
					</label>
				</div>
				<div>
					@*filmurl*@
					<InputText id="filmurl" class="form-control me-2" @bind-Value="CreateModel.FilmUrl" placeholder="FilmUrl.."></InputText>
					<ValidationMessage For="@(()=> CreateModel.FilmUrl)" />
				</div>
				<button type="submit" class="btn btn">Create</button>
			</EditForm>
		}
		@if (Page.Equals(PageType.Update))
		{
			<EditForm Model="@UpdateModel" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<InputText id="title" class="form-control me-2" @bind-Value="UpdateModel.Title" disabled placeholder="@Model.Title"></InputText>
				<div class="mb-3">
					<InputFile OnChange="@FileInput"></InputFile>
				</div>
				<div class=" mb-3">
					<section>
						<div class="form-check form-switch">
							@foreach (var item in Model.Genres)
							{
								SelectedValuesGenre.Add(item.Id);
							}
							@foreach (var item in Genres)
							{
								if (SelectedValuesGenre.Contains(item.Id))
								{
									<div>
										<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onclick="()=> HandleFilmGenre(Model.Id, item.Id)" checked />
										<label class="form-check-label" for="flexSwitchCheckDefault">@item.Name</label>
									</div>
								}
								else
								{
									<div>
										<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onclick="()=>HandleFilmGenre(Model.Id, item.Id)" />
										<label class="form-check-label" for="flexSwitchCheckDefault">@item.Name</label>
									</div>
								}
							}
						</div>
					</section>
					<DataAnnotationsValidator />
					<ValidationSummary />
				</div>
				<div class=" mb-3">
					<section>
						<div class="form-check form-switch">
							@foreach (var item in Model.SimilarFilms)
							{
								SelectedValuesSimilar.Add(item.FilmId);
							}
							@foreach (var item in Films)
							{
								if (SelectedValuesSimilar.Contains(item.Id))
								{
									<div>
										<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onclick="()=> HandleSimilarFilm(Model.Id, item.Id)" checked />
										<label class="form-check-label" for="flexSwitchCheckDefault">@item.Title</label>
									</div>
								}
								else
								{
									<div>
										<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onclick="()=>HandleSimilarFilm(Model.Id, item.Id)" />
										<label class="form-check-label" for="flexSwitchCheckDefault">@item.Title</label>
									</div>
								}
							}
						</div>
					</section>
					<DataAnnotationsValidator />
					<ValidationSummary />
				</div>
				<div class="mb-3">
					@*title*@
					<InputText id="title" class="form-control me-2" @bind-Value="UpdateModel.Title" placeholder="New title .."></InputText>
					<ValidationMessage For="@(()=> UpdateModel.Title)" />
				</div>
				<div class="mb-3">
					@*descripton*@
					<InputText id="description" class="form-control me-2" @bind-Value="UpdateModel.Description" placeholder="@Model.Description"></InputText>
					<ValidationMessage For="@(()=> UpdateModel.Description)" />
				</div>
				<div class="mb-3">
					@*released*@
					<InputDate id="released" class="form-control me-2" @bind-Value="UpdateModel.Released" placeholder="@Model.Released"></InputDate>
					<ValidationMessage For="@(()=> UpdateModel.Released)" />
				</div>
				<div>
					@*director*@
					<InputSelect @bind-Value="UpdateModel.DirectorId" class="form-control mb-3">
						<option value=@UpdateModel.DirectorId>Choose director..</option>
						@foreach (var director in Directors)
						{
							<option value="@director.Id">
								@director.Name
							</option>
						}
					</InputSelect>
					<ValidationMessage For="@(()=> UpdateModel.DirectorId)" />
				</div>
				<div class="mb-3">
					@*free*@
					<label>
						<InputCheckbox @bind-Value="UpdateModel.Free"></InputCheckbox>
						Free Film
						<ValidationMessage For="@(()=> UpdateModel.Free)" />
					</label>
				</div>
				<div>
					@*filmurl*@
					<InputText id=" filmurl" class="form-control me-2" @bind-Value="UpdateModel.FilmUrl" placeholder="@Model.FilmUrl">
					</InputText>
					<ValidationMessage For="@(()=> UpdateModel.FilmUrl)" />
				</div>
				<button type="submit" class="btn btn">Update</button>
			</EditForm>
		}
	</div>
</div>
@code {
	//create & update needs
	[Parameter] public CreateFilmDto CreateModel { get; set; } = new();
	[Parameter] public UpdateFilmDto UpdateModel { get; set; } = new();
	public List<DirectorDto> Directors { get; set; } = new(); //choose director
	private long maxFileSize = 1024 * 1024 * 3;//imageupload
	string FileName { get; set; } = null!;
	public List<GenreDto> Genres { get; set; } = new(); //choose genres
	public FilmGenreDto filmGenre { get; set; } = new();//Create new filmgenre when choosing new genre
	public List<FilmGenreDto> filmGenres { get; set; } = new();//Create new filmgenre when choosing new genre
	public List<int> SelectedValuesGenre { get; set; } = new();//toggling genres, toggled if already exists
	public List<int> SelectedValuesSimilar { get; set; } = new();//toggling genres, toggled if already exists
	public List<FilmInfoDto> Films { get; set; } = new(); //for similarfilms
	public List<ManageSimilarFilmDto> SimilarFilms { get; set; } = new(); //compare so u dont add twice
	//delete needs
	[Parameter] public FilmInfoDto Model { get; set; } = new();

	//functionality
	[Parameter] public string Page { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> OnChangeAlert { get; set; }
	[Parameter] public EventCallback<ClickModel> OnClick { get; set; }

	public ManageSimilarFilmDto SimilarFilmReverse { get; set; } = new(); //Create new similarfilm (two times?)
	public ManageSimilarFilmDto SimilarFilm = new();

	protected override async Task OnInitializedAsync()
	{
		Films = await AdminService.ReadAsync<FilmInfoDto>("films");
		filmGenres = await AdminService.ReadAsync<FilmGenreDto>("filmgenres");
		Directors = await AdminService.ReadAsync<DirectorDto>("directors");
		Genres = await AdminService.ReadAsync<GenreDto>("genres");

	}
	private async Task HandleSimilarFilm(int filmId, int similarId)
	{
		SimilarFilmReverse.SimilarId = filmId;
		SimilarFilmReverse.FilmId = similarId;
		SimilarFilm.SimilarId = similarId;
		SimilarFilm.FilmId = filmId;
		bool existsSimilar = false;
		bool existsReverse = false;
		SimilarFilms = await AdminService.ReadAsync<ManageSimilarFilmDto>("similarfilms");

		foreach (var item in SimilarFilms)
		{
			if (item.SimilarId == SimilarFilmReverse.FilmId && item.FilmId == SimilarFilmReverse.SimilarId) { existsReverse = true; }
			if (item.SimilarId == SimilarFilm.SimilarId && item.FilmId == SimilarFilm.FilmId) { existsSimilar = true; }
		}
		//if(SimilarFilms.Contains(SimilarFilm) && SimilarFilms.Contains(reverse)) { exists = true; }
		if (existsReverse == true && existsSimilar == true)
		{
			await AdminService.DeleteAsync<ManageSimilarFilmDto>("similarfilms", SimilarFilm);
			await AdminService.DeleteAsync<ManageSimilarFilmDto>("similarfilms", SimilarFilmReverse);
		}
		else
		{
			await AdminService.CreateAsync<ManageSimilarFilmDto>("similarfilms", SimilarFilm);
			await AdminService.CreateAsync<ManageSimilarFilmDto>("similarfilms", SimilarFilmReverse);
		}
	}
	private async Task HandleFilmGenre(int filmid, int genreid)
	{
		filmGenre.FilmId = filmid;
		filmGenre.GenreId = genreid;
		bool exists = false;
		filmGenres = await AdminService.ReadAsync<FilmGenreDto>("filmgenres");
		foreach (var item in filmGenres)
		{
			if (item.FilmId == filmGenre.FilmId && item.GenreId == filmGenre.GenreId) { exists = true; }
		}
		if (exists == true) { await AdminService.DeleteAsync<FilmGenreDto>("filmgenres", filmGenre); }
		else { await AdminService.CreateAsync<FilmGenreDto>("filmgenres", filmGenre); }
	}
	private async Task FileInput(InputFileChangeEventArgs e)
	{
		var file = e.File;
		FileName = "/images/" + file.Name;
		CreateModel.ImgUrl = FileName;
		UpdateModel.ImgUrl = FileName;

		var path = Path.Combine(environment.WebRootPath, "images", file.Name);
		await using FileStream fs = new(path, FileMode.Create);
		await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
	}
	private async Task SubmitChanges()
	{
		try
		{
			switch (Page)
			{
				case "Create":
					try
					{
						await AdminService.CreateAsync<CreateFilmDto>("films", CreateModel);
						Films = await AdminService.ReadAsync<FilmInfoDto>("films");
						foreach (var item in Films)
						{
							if (item.Title == CreateModel.Title)
							{
								foreach (var genre in SelectedValuesGenre)
								{
									await HandleFilmGenre(item.Id, genre);
								}
							}
						}
						foreach (var item in Films)
						{
							if (item.Title == CreateModel.Title)
							{
								foreach (var film in SelectedValuesSimilar)
								{
									await HandleSimilarFilm(item.Id, film);
								}
							}
						}
						await OnChangeAlert.InvokeAsync($"Film: '{CreateModel.Title}' has been added");
					}
					catch (Exception)
					{

						await OnChangeAlert.InvokeAsync($"Could not add the film. Make sure all fields are filled before submitting.");
					}
					break;
				case "Update":
					try
					{
						UpdateModel.Id = Model.Id;
						await AdminService.UpdateAsync<UpdateFilmDto>($"films/{Model.Id}", UpdateModel);
						await OnChangeAlert.InvokeAsync($"Film: '{Model.Title}' has been updated.");
					}
					catch
					{
						await OnChangeAlert.InvokeAsync($"No changes submitted to film '{Model.Title}' unless you have submitted changes to the films genres or its list of similarfilms.");
					}
					break;
				case "Delete":
					try
					{
						foreach (var item in Model.SimilarFilms)
						{
							await HandleSimilarFilm(item.SimilarId, item.FilmId);
						}
						await AdminService.DeleteAsync<FilmDto>($"films/{Model.Id}");
						await OnChangeAlert.InvokeAsync($"Film '{Model.Title}' has been deleted.");

					}
					catch
					{
						await OnChangeAlert.InvokeAsync($"Could not delete the film: '{Model.Title}'.");
					}
					break;
			}
		}
		catch
		{
			await OnChangeAlert.InvokeAsync($"Could not submit the changes to the film: '{CreateModel.Title}'.");
		}
	}
}