@inject IAdminService AdminService
@inject IWebHostEnvironment environment
<div class="d-xl justify-content-center">
	<div class="mb-3">
		@if (Page.Equals(PageType.Delete))
		{
			<EditForm Model="@Model" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<InputText id="title" class="form-control me-2" @bind-Value="Model.Title" disabled placeholder="Title"></InputText>
				<ValidationMessage For="@(()=> Model.Title)" />
				<button type="submit" class="btn btn">Delete</button>
			</EditForm>
		}
		@if (Page.Equals(PageType.Create))
		{
			<EditForm Model="@CreateModel" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<div class="mb-3">
					@*title*@
					<InputText id="title" class="form-control me-2" @bind-Value="CreateModel.Title" placeholder="Title"></InputText>
					<ValidationMessage For="@(()=> CreateModel.Title)" />
				</div>
				<div class="mb-3">
					@*title*@
					<InputFile OnChange="@FileInput"></InputFile>
				</div>
				<div class="mb-3">
					@*description*@
					<InputText id="description" class="form-control me-2" @bind-Value="CreateModel.Description" placeholder="Description"></InputText>
					<ValidationMessage For="@(()=> CreateModel.Description)" />
				</div>
				<div class="mb-3">
					@*released*@
					<InputDate id="released" class="form-control me-2" @bind-Value="CreateModel.Realeased" placeholder="Realeased"></InputDate>
					<ValidationMessage For="@(()=> CreateModel.Realeased)" />
				</div>
				<div>
					@*directorID*@
					<InputSelect @bind-Value="CreateModel.DirectorId" class="form-control mb-3">
						<option value=0>Director ...</option>
						@foreach (var director in Directors)
						{
							<option value="@director.Id">
								@director.Name
							</option>
						}
					</InputSelect>
					<ValidationMessage For="@(()=> CreateModel.DirectorId)" />
				</div>
				<div>
					@*genres*@
					<DataAnnotationsValidator />
					<ValidationSummary />
					<div class="form-check form-switch">
						@foreach (var item in Genres)
						{
							<div>
								<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" value="@item.Id" @onclick="()=>SelectedValues.Add(item.Id)" />
								<label class="form-check-label" for="flexSwitchCheckDefault">@item.Name</label>
							</div>
						}
					</div>
				</div>
				<div class="m-3">
					@*free*@
					<label>
						<InputCheckbox @bind-Value="CreateModel.Free"></InputCheckbox>
						Free Film
						<ValidationMessage For="@(()=> CreateModel.Free)" />
					</label>
				</div>
				<div>
					@*filmurl*@
					<InputText id="filmurl" class="form-control me-2" @bind-Value="CreateModel.FilmUrl" placeholder="FilmUrl.."></InputText>
					<ValidationMessage For="@(()=> CreateModel.FilmUrl)" />
				</div>
				<button type="submit" class="btn btn">Create</button>
			</EditForm>
		}
		@if (Page.Equals(PageType.Update))
		{
			<EditForm Model="@UpdateModel" OnValidSubmit="@SubmitChanges" class="mb-5 border border-1 border-secondary p-2 w-25">
				<InputText id="title" class="form-control me-2" @bind-Value="UpdateModel.Title" disabled placeholder="@Model.Title"></InputText>
				<div class="mb-3">
					<InputFile OnChange="@FileInput"></InputFile>
				</div>
				<div class=" mb-3">
					<section>
						<div class="form-check form-switch">
							@foreach (var item in Model.FilmGenres)
							{
								SelectedValues.Add(item.Id);
							}
							@foreach (var item in Genres)
							{
								if (SelectedValues.Contains(item.Id))
								{
									<div>
										<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onclick="()=> HandleFilmGenre(Model.Id, item.Id)" checked />
										<label class="form-check-label" for="flexSwitchCheckDefault">@item.Name</label>
									</div>
								}
								else
								{
									<div>
										<input class="form-check-input" type="checkbox" id="flexSwitchCheckDefault" @onclick="()=>HandleFilmGenre(Model.Id, item.Id)" />
										<label class="form-check-label" for="flexSwitchCheckDefault">@item.Name</label>
									</div>
								}
							}
						</div>
					</section>
					<DataAnnotationsValidator />
					<ValidationSummary />
				</div>
				<div class="mb-3">
					@*title*@
					<InputText id="title" class="form-control me-2" @bind-Value="UpdateModel.Title" placeholder="New title .."></InputText>
					<ValidationMessage For="@(()=> UpdateModel.Title)" />
				</div>
				<div class="mb-3">
					@*descripton*@
					<InputText id="description" class="form-control me-2" @bind-Value="UpdateModel.Description" placeholder="@Model.Description"></InputText>
					<ValidationMessage For="@(()=> UpdateModel.Description)" />
				</div>
				<div class="mb-3">
					@*released*@
					<InputDate id="released" class="form-control me-2" @bind-Value="UpdateModel.Realeased" placeholder="@Model.Realeased"></InputDate>
					<ValidationMessage For="@(()=> UpdateModel.Realeased)" />
				</div>
				<div>
					@*director*@
					<InputSelect @bind-Value="UpdateModel.DirectorId" class="form-control mb-3">
						<option value=@UpdateModel.DirectorId>Choose director..</option>
						@foreach (var director in Directors)
						{
							<option value="@director.Id">
								@director.Name
							</option>
						}
					</InputSelect>
					<ValidationMessage For="@(()=> UpdateModel.DirectorId)" />
				</div>
				<div class="mb-3">
					@*free*@
					<label>
						<InputCheckbox @bind-Value="UpdateModel.Free"></InputCheckbox>
						Free Film
						<ValidationMessage For="@(()=> UpdateModel.Free)" />
					</label>
				</div>
				<div>
					@*filmurl*@
					<InputText id=" filmurl" class="form-control me-2" @bind-Value="UpdateModel.FilmUrl" placeholder="@Model.FilmUrl">
					</InputText>
					<ValidationMessage For="@(()=> UpdateModel.FilmUrl)" />
				</div>
				<button type="submit" class="btn btn">Update</button>
			</EditForm>
		}
	</div>
</div>
@code {
	[Parameter] public CreateFilmDto CreateModel { get; set; } = new();
	[Parameter] public UpdateFilmDto UpdateModel { get; set; } = new();
	[Parameter] public FilmDto Model { get; set; } = new();
	[Parameter] public string Page { get; set; } = string.Empty;
	[Parameter] public EventCallback<string> OnChangeAlert { get; set; }
	[Parameter] public EventCallback<ClickModel> OnClick { get; set; }
	public List<int> SelectedValues { get; set; } = new();
	public FilmGenreDto filmGenre { get; set; } = new();
	public List<FilmGenreDto> filmGenres { get; set; } = new();
	public List<DirectorDto> Directors { get; set; } = new();
	public List<CreateGenreDto> Genres { get; set; } = new();
	public List<FilmDto> Films { get; set; } = new();
	public List<CreateGenreDto> AddGenres { get; set; } = new();
	private long maxFileSize = 1024 * 1024 * 3;
	string FileName { get; set; } = null!;
	protected override async Task OnInitializedAsync()
	{
		Directors = await AdminService.ReadAsync<DirectorDto>("directors");
		Genres = await AdminService.ReadAsync<CreateGenreDto>("genres");
		filmGenres = await AdminService.ReadAsync<FilmGenreDto>("filmgenres");
	}
	private async Task HandleFilmGenre(int filmid, int genreid)
	{
		filmGenre.FilmId = filmid;
		filmGenre.GenreId = genreid;
		bool exists = false;
		filmGenres = await AdminService.ReadAsync<FilmGenreDto>("filmgenres");
		foreach (var item in filmGenres)
		{
			if (item.FilmId == filmGenre.FilmId && item.GenreId == filmGenre.GenreId) { exists = true; }
		}
		if (exists == true) { await AdminService.DeleteAsync<FilmGenreDto>("filmgenres", filmGenre); }
		else { await AdminService.CreateAsync<FilmGenreDto>("filmgenres", filmGenre); }
	}
	private async Task FileInput(InputFileChangeEventArgs e)
	{
		var file = e.File;
		FileName = "/images/" + file.Name.ToString();
		CreateModel.ImgUrl = FileName;
		UpdateModel.ImgUrl = FileName;
		var path = Path.Combine(environment.WebRootPath, "images", file.Name);
		await using FileStream fs = new(path, FileMode.Create);
		await file.OpenReadStream(maxFileSize).CopyToAsync(fs);
	}
	private async Task SubmitChanges()
	{
		try
		{
			switch (Page)
			{
				case "Create":
					await AdminService.CreateAsync<CreateFilmDto>("films", CreateModel);
					Films = await AdminService.ReadAsync<FilmDto>("films");
					foreach (var item in Films)
					{
						if (item.Title == CreateModel.Title)
						{
							foreach (var genre in SelectedValues)
							{
								await HandleFilmGenre(item.Id, genre);
							}
						}
					}
					await OnChangeAlert.InvokeAsync($"Film '{CreateModel.Title}'has been added");
					break;
				case "Update":

					UpdateModel.Id = Model.Id;
					await AdminService.UpdateAsync<UpdateFilmDto>($"films/{UpdateModel.Id}", UpdateModel);
					await OnChangeAlert.InvokeAsync($"Film '{UpdateModel.Title}' has been updated.");
					break;
				case "Delete":
					await AdminService.DeleteAsync<FilmDto>($"films/{Model.Id}");
					await OnChangeAlert.InvokeAsync($"Film '{Model.Title}' has been deleted.");
					break;
				case "Add":
					break;
			}
		}
		catch
		{
			await OnChangeAlert.InvokeAsync($"Could not submit the changes to the film '{CreateModel.Title}'.");
		}
	}
}
